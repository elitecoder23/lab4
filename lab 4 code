#include <stdio.h>
#include <math.h>


/*-----------------------------------------------------------------------------
-	                            Defines
-----------------------------------------------------------------------------*/


/*-----------------------------------------------------------------------------
-	                            Prototypes
-----------------------------------------------------------------------------*/
	int close_to (double tolerance, double point, double value);
	double mag(double x, double y, double z);
	int isTop(double gy);
	int isBottom(double gy);
	int isRight(double gx);
	int isLeft(double gx);
	int isFront(double gz);
	int isBack(double gz);
	int turnOff(int triangle);
/*-----------------------------------------------------------------------------
-							  Implementation
-----------------------------------------------------------------------------*/
int main(void) {
    int t, b1, b2, b3, b4;
    double ax, ay, az, gx, gy, gz;
	double tolerance = 0.15;
	b1 = 0;
	int pos = 0;
	int prevPos = 0;
	
    while (b1 != 1) {
        scanf("%d, %lf, %lf, %lf, %lf, %lf, %lf, %d, %d, %d, %d", &t, &ax, &ay, &az, &gx, &gy, &gz, &b1, &b2, &b3, &b4 );


		if (isTop(gy)) { 
			pos = 0;
			}
		
		if (isBottom(gy)){
			pos = 1;
		}
		
		if (isRight(gx)){
			pos = 2;
		}
		
		if (isLeft(gx)){
			pos = 3;
		}
		
		if (isFront(gz)){
			pos = 4;
		}
			
		if (isBack(gz)){
			pos = 5;
		}
		
		if (prevPos != pos){
			switch(pos){
				case 0:
					printf("TOP\n");
					break;
				case 1:
					printf("BOTTOM\n");
					break;
				case 2:
					printf("RIGHT\n");
					break;
				case 3:
					printf("LEFT\n");
					break;
				case 4:
					printf("FRONT\n");
					break;
				case 5:
					printf("BACK\n");
					break;
			}
		}
		prevPos = pos;
			
	
	fflush(stdout);
    }

    return 0;
}
/* Put your functions here */
	double mag(double x, double y, double z) {
		double mag = sqrt((x * x) + (y * y) + (z * z));
		return (mag);
	}
	int close_to (double tolerance, double point, double value) {	//used direct comparisons of values instead of a close_to
		double test1 = point + tolerance;
		double test2 = point - tolerance;
	}

	int isTop (double gy){
		if ((gy > 0.85) && (gy < 1.15)) { //this for instance as a direct comparison

		return 1;
		}
		else {
			return 0;
		}
	}
	int isBottom (double gy) {
		return ((gy > -1.15) && (gy < -0.85));
	}
	
	int isRight (double gx) {
		return ((gx > 0.85) && (gx < 1.15)); 
	}
	
	int isLeft (double gx){
		return ((gx > -1.15) && (gx < -0.85)); 
	}
		
	int isFront (double gz) {
		return ((gz > -1.15) && (gz < -0.85));
	}
	int isBack (double gz) {
		return ((gz > 0.85) && (gz < 1.15));

	}  
